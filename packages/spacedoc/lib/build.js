const createHelper = require('./util/helper');
const path = require('path');
const yaml = require('js-yaml');
const helpers = require('spacedoc-helpers');

/**
 * Create an HTML page out of a documentation object.
 * @param {PageData} data - Page object generated by `Spacedoc.parse()`.
 * @throws Will throw an error if no template was set with `Spacedoc.config()`.
 * @throws Will throw an error if the template encounters an error while rendering.
 * @returns {String} Rendered HTML string.
 */
module.exports = function build(data = {}) {
  // Render a template with the component's data and write it to disk
  let output = '';

  if (data.layout && !this.multiTemplate) {
    console.warn(`Spacedoc: alternate layouts cannot be used if only a single template was passed to Spacedoc.config(). (Layout set by ${data.fileName})`);
  }

  // Create a function to access documentation data for a specific adapter.
  // It's used in the Pug template like this: `spacedoc('adapterName')`
  const helper = createHelper.call(this, data);

  // Use a page-defined layout or the default one
  const layout = this.multiTemplate ? (data.layout || 'default') : 'default';

  // Extend file data with global data and template locals
  data = Object.assign({}, this.options.data, data, {
    spacedoc: helper,
    helpers,
    site: Object.assign({}, this.options.site, {
      pages: this.tree,
    }),
  });

  // Render the set layout
  if (layout in this.templates) {
    // Manually catch template errors, because Gulp won't display them
    try {
      output = this.templates[layout](data);
    }
    catch (e) {
      console.warn('Spacedoc.build(): ', e);
    }
  }
  else {
    console.warn(`Spacedoc.build(): no layout called ${layout} exists. (Set by ${data.fileName})`);
  }

  // Preserve Front Matter if configured to
  if (this.options.keepFm) {
    output = `---\n${yaml.safeDump(data._frontMatter)}\n---\n\n${output}` ;
  }

  return output;
}
