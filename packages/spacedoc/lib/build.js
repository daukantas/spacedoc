const filter = require('lodash.filter');
const fromPairs = require('lodash.frompairs');
const path = require('path');
const yaml = require('js-yaml');
const helpers = require('spacedoc-helpers');

/**
 * Create an HTML page out of a documentation object.
 * @param {PageData} data - Page object generated by `Spacedoc.parse()`.
 * @throws Will throw an error if the template encounters an error while rendering.
 * @returns {String} Rendered HTML string.
 */
module.exports = function build(data = {}) {
  /**
   * Locals passed to a Pug template.
   * @typedef {Object} PageLocals
   * @prop {PageData} page - Page-specific data (includes doclets, page title, page body, etc.)
   * @prop {Object} site - Site-wide data.
   * @prop {PageData[]} site.pages - Complete list of pages.
   * @prop {Object} spacedoc - Spacedoc helper functions and metadata. Includes all functions in the spacedoc-helpers package.
   * @prop {PageFindFunction} spacedoc.find - Used to look up doclets attached to the current page.
   * @prop {Object} spacedoc.adapters - List of loaded adapters.
   * @prop {Object} theme - Theme-specific settings.
   */
  const locals = {
    page: data,
    //
    site: {
      pages: this.tree,
    },
    spacedoc: Object.assign({
      /**
       * Find a doclet within a specific adapter's data set.
       * @callback PageFindFunction
       * @param {String} scope - Adapter data to search in.
       * @param {*} predicate - Argument to pass to `lodash.filter`.
       * @returns {?Object[]} List of doclets, or `undefined` if none were found.
       */
      find: (scope, predicate = {}) => {
        if (scope in data.docs) {
          return filter(data.docs[scope], predicate);
        }
        return [];
      },
      adapters: this.adapters,
    }, helpers),
    theme: this.options.themeOptions,
  };

  // Render to HTML
  let output;

  try {
    output = this.theme.compileString(locals, data.layout);
  }
  catch (e) {
    console.log(`Got this error while parsing ${data.originalName}:`);
    throw e;
  }

  // Preserve Front Matter if configured to
  if (this.options.keepFm) {
    return `---\n${yaml.safeDump(data._frontMatter)}\n---\n\n${output}`;
  }

  return output;
}
